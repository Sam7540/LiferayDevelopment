/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.safesail.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.safesail.model.Form1;
import com.safesail.model.Form1Model;
import com.safesail.service.persistence.Form1PK;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Form1 service. Represents a row in the &quot;Safe_Sail_Form1&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Form1Model</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Form1Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Form1Impl
 * @generated
 */
@JSON(strict = true)
public class Form1ModelImpl extends BaseModelImpl<Form1> implements Form1Model {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form1 model instance should use the <code>Form1</code> interface instead.
	 */
	public static final String TABLE_NAME = "Safe_Sail_Form1";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"sailId", Types.BIGINT},
		{"quoteId", Types.VARCHAR}, {"fullname", Types.VARCHAR},
		{"dob", Types.TIMESTAMP}, {"gender", Types.VARCHAR},
		{"phoneNo", Types.BIGINT}, {"emailAddress", Types.VARCHAR},
		{"panNumber", Types.VARCHAR}, {"annualIncome", Types.BIGINT},
		{"sumAssured", Types.BIGINT}, {"policyTerm", Types.INTEGER},
		{"PPTerm", Types.INTEGER}, {"paymentFrequency", Types.VARCHAR},
		{"PayoutOption", Types.VARCHAR}, {"lifeSecure", Types.INTEGER},
		{"lifePlus", Types.INTEGER}, {"CIPBenefit", Types.INTEGER},
		{"totalValues", Types.BIGINT}, {"totalAddon", Types.BIGINT},
		{"agreement", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quoteId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("panNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("annualIncome", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sumAssured", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("policyTerm", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("PPTerm", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("paymentFrequency", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PayoutOption", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lifeSecure", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lifePlus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CIPBenefit", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalValues", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalAddon", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("agreement", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Safe_Sail_Form1 (uuid_ VARCHAR(75) null,sailId LONG not null,quoteId VARCHAR(75) not null,fullname VARCHAR(75) null,dob DATE null,gender VARCHAR(75) null,phoneNo LONG,emailAddress VARCHAR(75) null,panNumber VARCHAR(75) null,annualIncome LONG,sumAssured LONG,policyTerm INTEGER,PPTerm INTEGER,paymentFrequency VARCHAR(75) null,PayoutOption VARCHAR(75) null,lifeSecure INTEGER,lifePlus INTEGER,CIPBenefit INTEGER,totalValues LONG,totalAddon LONG,agreement BOOLEAN,primary key (sailId, quoteId))";

	public static final String TABLE_SQL_DROP = "drop table Safe_Sail_Form1";

	public static final String ORDER_BY_JPQL =
		" ORDER BY form1.id.sailId ASC, form1.id.quoteId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Safe_Sail_Form1.sailId ASC, Safe_Sail_Form1.quoteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SAILID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUOTEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public Form1ModelImpl() {
	}

	@Override
	public Form1PK getPrimaryKey() {
		return new Form1PK(_sailId, _quoteId);
	}

	@Override
	public void setPrimaryKey(Form1PK primaryKey) {
		setSailId(primaryKey.sailId);
		setQuoteId(primaryKey.quoteId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Form1PK(_sailId, _quoteId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Form1PK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Form1.class;
	}

	@Override
	public String getModelClassName() {
		return Form1.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Form1, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Form1, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Form1, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Form1)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Form1, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Form1, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Form1)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Form1, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Form1, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Form1, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Form1, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Form1, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Form1, Object>>();
		Map<String, BiConsumer<Form1, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Form1, ?>>();

		attributeGetterFunctions.put("uuid", Form1::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Form1, String>)Form1::setUuid);
		attributeGetterFunctions.put("sailId", Form1::getSailId);
		attributeSetterBiConsumers.put(
			"sailId", (BiConsumer<Form1, Long>)Form1::setSailId);
		attributeGetterFunctions.put("quoteId", Form1::getQuoteId);
		attributeSetterBiConsumers.put(
			"quoteId", (BiConsumer<Form1, String>)Form1::setQuoteId);
		attributeGetterFunctions.put("fullname", Form1::getFullname);
		attributeSetterBiConsumers.put(
			"fullname", (BiConsumer<Form1, String>)Form1::setFullname);
		attributeGetterFunctions.put("dob", Form1::getDob);
		attributeSetterBiConsumers.put(
			"dob", (BiConsumer<Form1, Date>)Form1::setDob);
		attributeGetterFunctions.put("gender", Form1::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<Form1, String>)Form1::setGender);
		attributeGetterFunctions.put("phoneNo", Form1::getPhoneNo);
		attributeSetterBiConsumers.put(
			"phoneNo", (BiConsumer<Form1, Long>)Form1::setPhoneNo);
		attributeGetterFunctions.put("emailAddress", Form1::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress", (BiConsumer<Form1, String>)Form1::setEmailAddress);
		attributeGetterFunctions.put("panNumber", Form1::getPanNumber);
		attributeSetterBiConsumers.put(
			"panNumber", (BiConsumer<Form1, String>)Form1::setPanNumber);
		attributeGetterFunctions.put("annualIncome", Form1::getAnnualIncome);
		attributeSetterBiConsumers.put(
			"annualIncome", (BiConsumer<Form1, Long>)Form1::setAnnualIncome);
		attributeGetterFunctions.put("sumAssured", Form1::getSumAssured);
		attributeSetterBiConsumers.put(
			"sumAssured", (BiConsumer<Form1, Long>)Form1::setSumAssured);
		attributeGetterFunctions.put("policyTerm", Form1::getPolicyTerm);
		attributeSetterBiConsumers.put(
			"policyTerm", (BiConsumer<Form1, Integer>)Form1::setPolicyTerm);
		attributeGetterFunctions.put("PPTerm", Form1::getPPTerm);
		attributeSetterBiConsumers.put(
			"PPTerm", (BiConsumer<Form1, Integer>)Form1::setPPTerm);
		attributeGetterFunctions.put(
			"paymentFrequency", Form1::getPaymentFrequency);
		attributeSetterBiConsumers.put(
			"paymentFrequency",
			(BiConsumer<Form1, String>)Form1::setPaymentFrequency);
		attributeGetterFunctions.put("PayoutOption", Form1::getPayoutOption);
		attributeSetterBiConsumers.put(
			"PayoutOption", (BiConsumer<Form1, String>)Form1::setPayoutOption);
		attributeGetterFunctions.put("lifeSecure", Form1::getLifeSecure);
		attributeSetterBiConsumers.put(
			"lifeSecure", (BiConsumer<Form1, Integer>)Form1::setLifeSecure);
		attributeGetterFunctions.put("lifePlus", Form1::getLifePlus);
		attributeSetterBiConsumers.put(
			"lifePlus", (BiConsumer<Form1, Integer>)Form1::setLifePlus);
		attributeGetterFunctions.put("CIPBenefit", Form1::getCIPBenefit);
		attributeSetterBiConsumers.put(
			"CIPBenefit", (BiConsumer<Form1, Integer>)Form1::setCIPBenefit);
		attributeGetterFunctions.put("totalValues", Form1::getTotalValues);
		attributeSetterBiConsumers.put(
			"totalValues", (BiConsumer<Form1, Long>)Form1::setTotalValues);
		attributeGetterFunctions.put("totalAddon", Form1::getTotalAddon);
		attributeSetterBiConsumers.put(
			"totalAddon", (BiConsumer<Form1, Long>)Form1::setTotalAddon);
		attributeGetterFunctions.put("agreement", Form1::getAgreement);
		attributeSetterBiConsumers.put(
			"agreement", (BiConsumer<Form1, Boolean>)Form1::setAgreement);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSailId() {
		return _sailId;
	}

	@Override
	public void setSailId(long sailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sailId = sailId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSailId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("sailId"));
	}

	@JSON
	@Override
	public String getQuoteId() {
		if (_quoteId == null) {
			return "";
		}
		else {
			return _quoteId;
		}
	}

	@Override
	public void setQuoteId(String quoteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quoteId = quoteId;
	}

	@JSON
	@Override
	public String getFullname() {
		if (_fullname == null) {
			return "";
		}
		else {
			return _fullname;
		}
	}

	@Override
	public void setFullname(String fullname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullname = fullname;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dob = dob;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public long getPhoneNo() {
		return _phoneNo;
	}

	@Override
	public void setPhoneNo(long phoneNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNo = phoneNo;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getPanNumber() {
		if (_panNumber == null) {
			return "";
		}
		else {
			return _panNumber;
		}
	}

	@Override
	public void setPanNumber(String panNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_panNumber = panNumber;
	}

	@JSON
	@Override
	public long getAnnualIncome() {
		return _annualIncome;
	}

	@Override
	public void setAnnualIncome(long annualIncome) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_annualIncome = annualIncome;
	}

	@JSON
	@Override
	public long getSumAssured() {
		return _sumAssured;
	}

	@Override
	public void setSumAssured(long sumAssured) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sumAssured = sumAssured;
	}

	@JSON
	@Override
	public int getPolicyTerm() {
		return _policyTerm;
	}

	@Override
	public void setPolicyTerm(int policyTerm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_policyTerm = policyTerm;
	}

	@JSON
	@Override
	public int getPPTerm() {
		return _PPTerm;
	}

	@Override
	public void setPPTerm(int PPTerm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PPTerm = PPTerm;
	}

	@JSON
	@Override
	public String getPaymentFrequency() {
		if (_paymentFrequency == null) {
			return "";
		}
		else {
			return _paymentFrequency;
		}
	}

	@Override
	public void setPaymentFrequency(String paymentFrequency) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentFrequency = paymentFrequency;
	}

	@JSON
	@Override
	public String getPayoutOption() {
		if (_PayoutOption == null) {
			return "";
		}
		else {
			return _PayoutOption;
		}
	}

	@Override
	public void setPayoutOption(String PayoutOption) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_PayoutOption = PayoutOption;
	}

	@JSON
	@Override
	public int getLifeSecure() {
		return _lifeSecure;
	}

	@Override
	public void setLifeSecure(int lifeSecure) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lifeSecure = lifeSecure;
	}

	@JSON
	@Override
	public int getLifePlus() {
		return _lifePlus;
	}

	@Override
	public void setLifePlus(int lifePlus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lifePlus = lifePlus;
	}

	@JSON
	@Override
	public int getCIPBenefit() {
		return _CIPBenefit;
	}

	@Override
	public void setCIPBenefit(int CIPBenefit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CIPBenefit = CIPBenefit;
	}

	@JSON
	@Override
	public long getTotalValues() {
		return _totalValues;
	}

	@Override
	public void setTotalValues(long totalValues) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalValues = totalValues;
	}

	@JSON
	@Override
	public long getTotalAddon() {
		return _totalAddon;
	}

	@Override
	public void setTotalAddon(long totalAddon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAddon = totalAddon;
	}

	@JSON
	@Override
	public Boolean getAgreement() {
		return _agreement;
	}

	@Override
	public void setAgreement(Boolean agreement) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_agreement = agreement;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Form1 toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Form1>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Form1Impl form1Impl = new Form1Impl();

		form1Impl.setUuid(getUuid());
		form1Impl.setSailId(getSailId());
		form1Impl.setQuoteId(getQuoteId());
		form1Impl.setFullname(getFullname());
		form1Impl.setDob(getDob());
		form1Impl.setGender(getGender());
		form1Impl.setPhoneNo(getPhoneNo());
		form1Impl.setEmailAddress(getEmailAddress());
		form1Impl.setPanNumber(getPanNumber());
		form1Impl.setAnnualIncome(getAnnualIncome());
		form1Impl.setSumAssured(getSumAssured());
		form1Impl.setPolicyTerm(getPolicyTerm());
		form1Impl.setPPTerm(getPPTerm());
		form1Impl.setPaymentFrequency(getPaymentFrequency());
		form1Impl.setPayoutOption(getPayoutOption());
		form1Impl.setLifeSecure(getLifeSecure());
		form1Impl.setLifePlus(getLifePlus());
		form1Impl.setCIPBenefit(getCIPBenefit());
		form1Impl.setTotalValues(getTotalValues());
		form1Impl.setTotalAddon(getTotalAddon());
		form1Impl.setAgreement(getAgreement());

		form1Impl.resetOriginalValues();

		return form1Impl;
	}

	@Override
	public Form1 cloneWithOriginalValues() {
		Form1Impl form1Impl = new Form1Impl();

		form1Impl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		form1Impl.setSailId(this.<Long>getColumnOriginalValue("sailId"));
		form1Impl.setQuoteId(this.<String>getColumnOriginalValue("quoteId"));
		form1Impl.setFullname(this.<String>getColumnOriginalValue("fullname"));
		form1Impl.setDob(this.<Date>getColumnOriginalValue("dob"));
		form1Impl.setGender(this.<String>getColumnOriginalValue("gender"));
		form1Impl.setPhoneNo(this.<Long>getColumnOriginalValue("phoneNo"));
		form1Impl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		form1Impl.setPanNumber(
			this.<String>getColumnOriginalValue("panNumber"));
		form1Impl.setAnnualIncome(
			this.<Long>getColumnOriginalValue("annualIncome"));
		form1Impl.setSumAssured(
			this.<Long>getColumnOriginalValue("sumAssured"));
		form1Impl.setPolicyTerm(
			this.<Integer>getColumnOriginalValue("policyTerm"));
		form1Impl.setPPTerm(this.<Integer>getColumnOriginalValue("PPTerm"));
		form1Impl.setPaymentFrequency(
			this.<String>getColumnOriginalValue("paymentFrequency"));
		form1Impl.setPayoutOption(
			this.<String>getColumnOriginalValue("PayoutOption"));
		form1Impl.setLifeSecure(
			this.<Integer>getColumnOriginalValue("lifeSecure"));
		form1Impl.setLifePlus(this.<Integer>getColumnOriginalValue("lifePlus"));
		form1Impl.setCIPBenefit(
			this.<Integer>getColumnOriginalValue("CIPBenefit"));
		form1Impl.setTotalValues(
			this.<Long>getColumnOriginalValue("totalValues"));
		form1Impl.setTotalAddon(
			this.<Long>getColumnOriginalValue("totalAddon"));
		form1Impl.setAgreement(
			this.<Boolean>getColumnOriginalValue("agreement"));

		return form1Impl;
	}

	@Override
	public int compareTo(Form1 form1) {
		Form1PK primaryKey = form1.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Form1)) {
			return false;
		}

		Form1 form1 = (Form1)object;

		Form1PK primaryKey = form1.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Form1> toCacheModel() {
		Form1CacheModel form1CacheModel = new Form1CacheModel();

		form1CacheModel.form1PK = getPrimaryKey();

		form1CacheModel.uuid = getUuid();

		String uuid = form1CacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			form1CacheModel.uuid = null;
		}

		form1CacheModel.sailId = getSailId();

		form1CacheModel.quoteId = getQuoteId();

		String quoteId = form1CacheModel.quoteId;

		if ((quoteId != null) && (quoteId.length() == 0)) {
			form1CacheModel.quoteId = null;
		}

		form1CacheModel.fullname = getFullname();

		String fullname = form1CacheModel.fullname;

		if ((fullname != null) && (fullname.length() == 0)) {
			form1CacheModel.fullname = null;
		}

		Date dob = getDob();

		if (dob != null) {
			form1CacheModel.dob = dob.getTime();
		}
		else {
			form1CacheModel.dob = Long.MIN_VALUE;
		}

		form1CacheModel.gender = getGender();

		String gender = form1CacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			form1CacheModel.gender = null;
		}

		form1CacheModel.phoneNo = getPhoneNo();

		form1CacheModel.emailAddress = getEmailAddress();

		String emailAddress = form1CacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			form1CacheModel.emailAddress = null;
		}

		form1CacheModel.panNumber = getPanNumber();

		String panNumber = form1CacheModel.panNumber;

		if ((panNumber != null) && (panNumber.length() == 0)) {
			form1CacheModel.panNumber = null;
		}

		form1CacheModel.annualIncome = getAnnualIncome();

		form1CacheModel.sumAssured = getSumAssured();

		form1CacheModel.policyTerm = getPolicyTerm();

		form1CacheModel.PPTerm = getPPTerm();

		form1CacheModel.paymentFrequency = getPaymentFrequency();

		String paymentFrequency = form1CacheModel.paymentFrequency;

		if ((paymentFrequency != null) && (paymentFrequency.length() == 0)) {
			form1CacheModel.paymentFrequency = null;
		}

		form1CacheModel.PayoutOption = getPayoutOption();

		String PayoutOption = form1CacheModel.PayoutOption;

		if ((PayoutOption != null) && (PayoutOption.length() == 0)) {
			form1CacheModel.PayoutOption = null;
		}

		form1CacheModel.lifeSecure = getLifeSecure();

		form1CacheModel.lifePlus = getLifePlus();

		form1CacheModel.CIPBenefit = getCIPBenefit();

		form1CacheModel.totalValues = getTotalValues();

		form1CacheModel.totalAddon = getTotalAddon();

		Boolean agreement = getAgreement();

		if (agreement != null) {
			form1CacheModel.agreement = agreement;
		}

		return form1CacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Form1, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Form1, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Form1, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Form1)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Form1, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Form1, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Form1, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Form1)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Form1>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Form1.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _sailId;
	private String _quoteId;
	private String _fullname;
	private Date _dob;
	private String _gender;
	private long _phoneNo;
	private String _emailAddress;
	private String _panNumber;
	private long _annualIncome;
	private long _sumAssured;
	private int _policyTerm;
	private int _PPTerm;
	private String _paymentFrequency;
	private String _PayoutOption;
	private int _lifeSecure;
	private int _lifePlus;
	private int _CIPBenefit;
	private long _totalValues;
	private long _totalAddon;
	private Boolean _agreement;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Form1, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Form1)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("sailId", _sailId);
		_columnOriginalValues.put("quoteId", _quoteId);
		_columnOriginalValues.put("fullname", _fullname);
		_columnOriginalValues.put("dob", _dob);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("phoneNo", _phoneNo);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("panNumber", _panNumber);
		_columnOriginalValues.put("annualIncome", _annualIncome);
		_columnOriginalValues.put("sumAssured", _sumAssured);
		_columnOriginalValues.put("policyTerm", _policyTerm);
		_columnOriginalValues.put("PPTerm", _PPTerm);
		_columnOriginalValues.put("paymentFrequency", _paymentFrequency);
		_columnOriginalValues.put("PayoutOption", _PayoutOption);
		_columnOriginalValues.put("lifeSecure", _lifeSecure);
		_columnOriginalValues.put("lifePlus", _lifePlus);
		_columnOriginalValues.put("CIPBenefit", _CIPBenefit);
		_columnOriginalValues.put("totalValues", _totalValues);
		_columnOriginalValues.put("totalAddon", _totalAddon);
		_columnOriginalValues.put("agreement", _agreement);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("sailId", 2L);

		columnBitmasks.put("quoteId", 4L);

		columnBitmasks.put("fullname", 8L);

		columnBitmasks.put("dob", 16L);

		columnBitmasks.put("gender", 32L);

		columnBitmasks.put("phoneNo", 64L);

		columnBitmasks.put("emailAddress", 128L);

		columnBitmasks.put("panNumber", 256L);

		columnBitmasks.put("annualIncome", 512L);

		columnBitmasks.put("sumAssured", 1024L);

		columnBitmasks.put("policyTerm", 2048L);

		columnBitmasks.put("PPTerm", 4096L);

		columnBitmasks.put("paymentFrequency", 8192L);

		columnBitmasks.put("PayoutOption", 16384L);

		columnBitmasks.put("lifeSecure", 32768L);

		columnBitmasks.put("lifePlus", 65536L);

		columnBitmasks.put("CIPBenefit", 131072L);

		columnBitmasks.put("totalValues", 262144L);

		columnBitmasks.put("totalAddon", 524288L);

		columnBitmasks.put("agreement", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Form1 _escapedModel;

}